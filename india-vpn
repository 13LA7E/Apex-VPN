#!/bin/bash

# ⚡ APEX VPN v1.0 - Peak Performance, Ultimate Simplicity ⚡
# The Summit of VPN Excellence - Maximum Speed, Security & Ad Blocking
# One VPN to rule them all - reaching the apex of network optimization

set -euo pipefail

# Configuration
readonly TAILSCALE_STATE_DIR="/home/vscode/.tailscale-state"
readonly TAILSCALE_SOCKET="/var/run/tailscale/tailscaled.sock"
readonly TAILSCALE_PORT="41641"
readonly AUTH_KEY_FILE="/home/vscode/.tailscale-auth"

# Logging function
log() {
    echo "[$(date '+%H:%M:%S')] $1"
}

# Ultimate network optimization - best of all worlds
optimize_network() {
    log "Applying ultimate network optimizations..."
    
    # High-performance TCP settings
    sudo sysctl -w net.ipv4.tcp_congestion_control=bbr 2>/dev/null || true
    sudo sysctl -w net.core.default_qdisc=cake 2>/dev/null || true
    sudo sysctl -w net.core.rmem_max=134217728
    sudo sysctl -w net.core.wmem_max=134217728
    sudo sysctl -w net.ipv4.tcp_rmem="8192 1048576 134217728"
    sudo sysctl -w net.ipv4.tcp_wmem="8192 1048576 134217728"
    sudo sysctl -w net.ipv4.tcp_fastopen=3
    sudo sysctl -w net.core.netdev_max_backlog=30000
    
    # Security hardening
    sudo sysctl -w net.ipv4.conf.all.accept_redirects=0
    sudo sysctl -w net.ipv4.conf.all.send_redirects=0
    sudo sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1
    sudo sysctl -w net.ipv4.tcp_syncookies=1
    sudo sysctl -w kernel.dmesg_restrict=1 2>/dev/null || true
    
    # Streaming optimizations
    sudo sysctl -w net.ipv4.tcp_slow_start_after_idle=0
    sudo sysctl -w net.ipv4.tcp_window_scaling=1
    sudo sysctl -w vm.swappiness=1
    sudo sysctl -w vm.dirty_ratio=15
}

# DNS sinkhole configuration for maximum ad and tracker blocking
setup_dns_sinkhole() {
    log "Setting up maximum DNS ad blocking..."
    
    # Create hosts file for blocking
    local HOSTS_FILE="/tmp/adblock-hosts"
    local HOSTS_BACKUP="/etc/hosts.backup"
    
    # Backup original hosts file
    if [ ! -f "$HOSTS_BACKUP" ]; then
        sudo cp /etc/hosts "$HOSTS_BACKUP" 2>/dev/null || true
    fi
    
    # Start with clean hosts file
    sudo cp "$HOSTS_BACKUP" /etc/hosts 2>/dev/null || true
    
    log "Downloading comprehensive ad and tracker blocklists..."
    
    # Download multiple blocklists for comprehensive coverage
    {
        # Steven Black's comprehensive hosts file (ads + malware + trackers)
        curl -s "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts" 2>/dev/null || true
        
        # Additional mobile ad blocking
        curl -s "https://someonewhocares.org/hosts/zero/hosts" 2>/dev/null || true
        
        # Malware and tracking protection
        curl -s "https://raw.githubusercontent.com/AdguardTeam/AdguardFilters/master/MobileFilter/sections/adservers.txt" 2>/dev/null | \
        grep -E "^\|\|" | sed 's/||/0.0.0.0 /' | sed 's/\^.*//' || true
        
        # Additional tracker and ad blocking (only tracking/ad domains)
        echo "# Additional tracker and ad blocking"
        cat << 'TRACKERS'
0.0.0.0 doubleclick.net
0.0.0.0 googlesyndication.com
0.0.0.0 googleadservices.com
0.0.0.0 google-analytics.com
0.0.0.0 googletagmanager.com
0.0.0.0 googletagservices.com
0.0.0.0 amazon-adsystem.com
0.0.0.0 facebook.com
0.0.0.0 connect.facebook.net
0.0.0.0 facebook-analytics.com
0.0.0.0 ads.twitter.com
0.0.0.0 analytics.twitter.com
0.0.0.0 ads.yahoo.com
0.0.0.0 analytics.yahoo.com
0.0.0.0 ads.bing.com
0.0.0.0 bat.bing.com
0.0.0.0 media.net
0.0.0.0 adsystem.com
0.0.0.0 adsymptotic.com
0.0.0.0 adnxs.com
0.0.0.0 adsafeprotected.com
0.0.0.0 scorecardresearch.com
0.0.0.0 quantserve.com
0.0.0.0 outbrain.com
0.0.0.0 taboola.com
0.0.0.0 pubmatic.com
0.0.0.0 rubiconproject.com
0.0.0.0 openx.net
0.0.0.0 contextweb.com
0.0.0.0 adsystem.com
0.0.0.0 2mdn.net
0.0.0.0 adsafeprotected.com
0.0.0.0 amazon-adsystem.com
0.0.0.0 googleadservices.com
0.0.0.0 googlesyndication.com
0.0.0.0 doubleclick.net
0.0.0.0 facebook.com
0.0.0.0 connect.facebook.net
0.0.0.0 ads.twitter.com
0.0.0.0 ads.linkedin.com
0.0.0.0 ads.pinterest.com
0.0.0.0 ads.reddit.com
0.0.0.0 ads.youtube.com
0.0.0.0 adsystem.com
0.0.0.0 adform.net
0.0.0.0 adnxs.com
0.0.0.0 adsystem.com
0.0.0.0 criteo.com
0.0.0.0 casalemedia.com
0.0.0.0 bluekai.com
0.0.0.0 turn.com
0.0.0.0 rlcdn.com
0.0.0.0 krxd.net
0.0.0.0 addthis.com
0.0.0.0 sharethis.com
TRACKERS
        
    } > "$HOSTS_FILE" 2>/dev/null
    
    # Process and clean the hosts file
    if [ -f "$HOSTS_FILE" ]; then
        # Remove comments, empty lines, and duplicates
        grep -E "^(0\.0\.0\.0|127\.0\.0\.1)" "$HOSTS_FILE" | \
        grep -v localhost | \
        sort -u | \
        head -50000 | sudo tee -a /etc/hosts >/dev/null 2>&1 || true
        
        rm -f "$HOSTS_FILE"
        log "Ad blocking activated - $(grep -c "^0.0.0.0" /etc/hosts 2>/dev/null || echo "0") domains blocked"
    fi
}

# DNS configuration - optimized for speed, security, and ad blocking
configure_dns() {
    log "Configuring optimized DNS with security and performance"
    
    # Use fastest secure DNS servers with fallbacks
    DNS_SERVERS="1.1.1.1#cloudflare-dns.com 1.1.1.2#security.cloudflare-dns.com 8.8.8.8#dns.google 9.9.9.9#dns.quad9.net"
    setup_dns_sinkhole
    
    if [ -d "/etc/systemd/resolved.conf.d" ]; then
        cat << EOF | sudo tee /etc/systemd/resolved.conf.d/vpn.conf >/dev/null
[Resolve]
DNS=$DNS_SERVERS
DNSOverTLS=yes
DNSSEC=yes
Cache=yes
EOF
        sudo systemctl restart systemd-resolved 2>/dev/null || true
    fi
}

# Authentication management
setup_auth() {
    log "Setting up persistent authentication..."
    
    # Create persistent state directory
    sudo mkdir -p "$TAILSCALE_STATE_DIR" /var/run/tailscale
    sudo chown vscode:vscode "$TAILSCALE_STATE_DIR" 2>/dev/null || true
    
    # Check if we have a saved auth key
    if [ -f "$AUTH_KEY_FILE" ]; then
        log "Found saved authentication"
        return 0
    fi
    
    # Check if already authenticated
    if sudo tailscale status >/dev/null 2>&1; then
        log "Already authenticated"
        return 0
    fi
    
    log "First-time setup: Please authenticate via the web interface"
    return 0
}

# Tailscale daemon management
manage_daemon() {
    local action="$1"
    
    case "$action" in
        "start")
            log "Starting persistent Tailscale daemon..."
            sudo pkill -9 tailscaled 2>/dev/null || true
            sleep 0.05
            
            # Setup persistent authentication
            setup_auth
            
            # Start daemon with persistent state directory (no tmpfs!)
            sudo tailscaled \
                --state="$TAILSCALE_STATE_DIR/tailscaled.state" \
                --socket="$TAILSCALE_SOCKET" \
                --port="$TAILSCALE_PORT" \
                --tun=userspace-networking \
                --no-logs-no-support &
            
            sleep 0.1
            # Priority boost in background to not delay startup
            (sleep 0.1 && sudo renice -20 $(pgrep tailscaled) 2>/dev/null || true) &
            ;;
        "stop")
            log "Stopping Tailscale daemon..."
            sudo tailscale down 2>/dev/null || true
            sudo pkill tailscaled 2>/dev/null || true
            ;;
    esac
}

# Ultimate VPN connection with maximum security and performance
connect_vpn() {
    log "Connecting VPN with ultimate configuration..."
    
    # Check if we need to authenticate first
    if ! sudo tailscale status >/dev/null 2>&1; then
        log "Authentication required. Please visit the login URL..."
        
        sudo tailscale up \
            --accept-routes \
            --accept-dns=false \
            --advertise-exit-node \
            --shields-up \
            --timeout=30s
        
        # Save auth state if successful
        if sudo tailscale status >/dev/null 2>&1; then
            touch "$AUTH_KEY_FILE"
            log "Authentication saved for future use"
        fi
    else
        # Already authenticated, just connect with all security features
        sudo tailscale up \
            --accept-routes \
            --accept-dns=false \
            --advertise-exit-node \
            --shields-up \
            --timeout=5s >/dev/null 2>&1
    fi
}

# Performance test function
performance_test() {
    log "Running performance diagnostics..."
    echo "Network Status:"
    sudo tailscale status 2>/dev/null | head -5 || echo "VPN not connected"
    
    echo ""
    echo "Connection Test:"
    ping -c 3 8.8.8.8 2>/dev/null | grep 'time=' | tail -1 || echo "Network test failed"
    
    echo ""
    echo "System Resources:"
    echo "CPU: $(nproc) cores | RAM: $(free -h | awk '/^Mem:/{print $2}') | Load: $(uptime | awk '{print $NF}')"
}

# Main execution logic - simplified single mode
main() {
    case "${1:-status}" in
        "start"|"up"|"performance"|"fast"|"secure"|"streaming")
            optimize_network
            configure_dns
            manage_daemon "start"
            connect_vpn
            log "⚡ APEX VPN activated - reaching peak performance with ultimate power!"
            performance_test
            ;;
        "stop"|"down")
            manage_daemon "stop"
            log "VPN stopped"
            ;;
        "restart")
            manage_daemon "stop"
            sleep 1
            optimize_network
            manage_daemon "start"
            connect_vpn
            ;;
        "status")
            # Quick status check with startup log info
            if sudo tailscale status 2>/dev/null; then
                echo ""
                echo "✅ APEX VPN at the summit - connected and dominating!"
            else
                echo "VPN not running"
                if [ -f /tmp/vpn-startup.log ]; then
                    echo ""
                    echo "📝 Auto-startup log:"
                    tail -5 /tmp/vpn-startup.log 2>/dev/null || true
                fi
            fi
            ;;
        "test")
            performance_test
            ;;
        "login"|"auth")
            log "Re-authenticating with Tailscale..."
            sudo tailscale logout 2>/dev/null || true
            rm -f "$AUTH_KEY_FILE" 2>/dev/null || true
            manage_daemon "start"
            connect_vpn
            ;;
        "adblock"|"ads")
            log "Ad blocking statistics:"
            local blocked_count=$(grep -c "^0.0.0.0" /etc/hosts 2>/dev/null || echo "0")
            echo "Blocked domains: $blocked_count"
            if [ "$blocked_count" -gt 100 ]; then
                echo "Ad blocking: ACTIVE"
            else
                echo "Ad blocking: INACTIVE (run './india-vpn start' to enable)"
            fi
            echo ""
            echo "Recently blocked domains (sample):"
            grep "^0.0.0.0" /etc/hosts 2>/dev/null | grep -v localhost | head -10 || echo "No blocked domains found"
            ;;
        "ready"|"check")
            echo "🔍 System Readiness Check:"
            echo ""
            
            # Check if Tailscale is installed
            if command -v tailscale >/dev/null 2>&1; then
                echo "✅ Tailscale: Installed"
            else
                echo "❌ Tailscale: Not installed"
            fi
            
            # Check if VPN is running
            if sudo tailscale status >/dev/null 2>&1; then
                echo "✅ VPN Status: Connected"
            else
                echo "⏳ VPN Status: Not connected (may be starting up)"
            fi
            
            # Check ad blocking
            local blocked_count=$(grep -c "^0.0.0.0" /etc/hosts 2>/dev/null || echo "0")
            if [ "$blocked_count" -gt 100 ]; then
                echo "✅ Ad Blocking: Active ($blocked_count domains blocked)"
            else
                echo "⏳ Ad Blocking: Not active"
            fi
            
            # Check startup log
            if [ -f /tmp/vpn-startup.log ]; then
                echo "✅ Auto-startup: Log available"
                echo ""
                echo "📝 Recent startup activity:"
                tail -3 /tmp/vpn-startup.log 2>/dev/null || true
            else
                echo "⏳ Auto-startup: No log found"
            fi
            ;;
        *)
            echo "⚡ APEX VPN v1.0 - Peak Performance, Ultimate Simplicity ⚡"
            echo ""
            echo "Usage: $0 [COMMAND]"
            echo ""
            echo "Commands:"
            echo "  start, up       Start ultimate VPN (max speed + security + ad blocking)"
            echo "  stop, down      Stop VPN connection"
            echo "  restart         Restart VPN service"
            echo "  login, auth     Re-authenticate with Tailscale (if logged out)"
            echo "  status          Show connection status"
            echo "  test            Run performance diagnostics"
            echo "  adblock, ads    Show ad blocking statistics"  
            echo "  ready, check    Check if everything is working"
            echo ""
            echo "⚡ APEX Features: Maximum Performance + Military Security + 50,000+ Ad Blocking"
            echo "🏔️ Version: 1.0 'Summit Edition' - One mode to conquer all networks"
            echo ""
            echo "Current Status:"
            sudo tailscale status 2>/dev/null | head -3 || echo "VPN not running"
            ;;
    esac
}

# Execute main function with all arguments
main "$@"